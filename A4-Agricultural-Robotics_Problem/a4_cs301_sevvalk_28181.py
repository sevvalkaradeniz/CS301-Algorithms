# -*- coding: utf-8 -*-
"""a4_cs301_sevvalk_28181.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IHoR-L2wZ9NpJ2suVuVBe--XVLdyn8y8
"""

#Sevval Karadeniz
import numpy as np
import time

#DP with memoization
def findingMaxNumberOfWeed(MaxCoinMatrix,m,n,InitialMatrix):

  #print('Weeds collected by Robot at each level are: ')
  #print(np.matrix(MaxCoinMatrix))
  if(MaxCoinMatrix[m][n]>1):
    return MaxCoinMatrix[m][n]
  elif m<0 or n<0:
    return;
  elif m==0 and n==0:
    MaxCoinMatrix[m][n]=InitialMatrix[m][n]
    return MaxCoinMatrix[m][n]
  elif m==0 and n>0:
    MaxCoinMatrix[m][n]=max(0,findingMaxNumberOfWeed(MaxCoinMatrix,m,n-1,InitialMatrix))+InitialMatrix[m][n]
    return MaxCoinMatrix[m][n]
  elif m>0 and n==0:
    MaxCoinMatrix[m][n]=max(findingMaxNumberOfWeed(MaxCoinMatrix,m-1,n,InitialMatrix),0)+InitialMatrix[m][n]
    return MaxCoinMatrix[m][n]
  elif m>0 and n>0:
    MaxCoinMatrix[m][n]=max(findingMaxNumberOfWeed(MaxCoinMatrix,m-1,n,InitialMatrix),findingMaxNumberOfWeed(MaxCoinMatrix,m,n-1,InitialMatrix))+InitialMatrix[m][n]
    return MaxCoinMatrix[m][n]


def findingPath(MaxCoinMatrix,m,n,pathArray,pathStr):

  if m<0 or n<0:
    return
  elif m==0 and n!=0:
    findingPath(MaxCoinMatrix,m,n-1,pathArray,pathStr)
    valueOfIndex = '[' + str(m) + '][' + str(n) + ']'
    pathStr.append(valueOfIndex)
    pathArray[m][n]="p"
  elif m!=0 and n==0:
    findingPath(MaxCoinMatrix,m-1,n,pathArray,pathStr)
    valueOfIndex = '[' + str(m) + '][' + str(n) + ']'
    pathStr.append(valueOfIndex)
    pathArray[m][n]="p"
  elif MaxCoinMatrix[m-1][n]> MaxCoinMatrix[m][n-1]:
    findingPath(MaxCoinMatrix,m-1,n,pathArray,pathStr)
    valueOfIndex = '[' + str(m) + '][' + str(n) + ']'
    pathStr.append(valueOfIndex)
    pathArray[m][n]="p"
  
  else:
    findingPath(MaxCoinMatrix,m,n-1,pathArray,pathStr)
    valueOfIndex = '[' + str(m) + '][' + str(n) + ']'
    pathStr.append(valueOfIndex)
    pathArray[m][n]="p"



  
# this part should change to test the algorithm
rows=5 #number of rows
col=6 #number of columns

CoinMatrix=[[0]*col for _ in range(rows)]
MaxCoinMatrix=[[0]*col for _ in range(rows)]
pathArray=[["."]*col for _ in range(rows)]
pathStr=[];

#Enter the input in here and change number of rows/columns too
CoinMatrix=[
          [1,0,0,0,0,0],
          [0,0,0,1,0,0],
          [0,1,0,0,0,0],
          [0,0,0,0,1,0],
          [0,0,1,0,0,0]
            ]


# get the start time
st = time.time()


findingMaxNumberOfWeed(MaxCoinMatrix,rows-1,col-1,CoinMatrix) #call findingMaxNumberOfWeed function with given parameters
#print(np.matrix(MaxCoinMatrix))
print("Farm")
print(np.matrix(CoinMatrix))

findingPath(MaxCoinMatrix,rows-1,col-1,pathArray,pathStr)
print("Path")
#In order to show path I use "p" character
print(np.matrix(pathArray))
print("Cells that we need to visit in order to collect maximum number of weed")
print(pathStr)


# get the end time
et = time.time()

# get the execution time
elapsed_time = et - st
print('Execution time:', elapsed_time, 'seconds')

import matplotlib.pyplot as plt
# x axis values
x = [0,9,16,25,36,64]
# corresponding y axis values
y = [0,0.001682,0.002240, 0.00322699,0.014587, 0.00548768]
  
# plotting the points 
plt.plot(x, y)
  
# naming the x axis
plt.xlabel('Size of the farm (mxn)')
# naming the y axis
plt.ylabel('Running time in seconds')
  
# giving a title to my graph
plt.title('DP Algorithm With Memoization')
  
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
# x axis values
x = [0,9,16,25,36,64]
# corresponding y axis values
y = [0,0.00345230,0.00290727, 0.00322699,0.006028652,0.01098299]
  
# plotting the points 
plt.plot(x, y)
  
# naming the x axis
plt.xlabel('Size of the farm (mxn)')
# naming the y axis
plt.ylabel('Running time in seconds')
  
# giving a title to my graph
plt.title('Naive Algorithm')
  
# function to show the plot
plt.show()

#test cases for performence testing
#1) 20x20 farm

CoinMatrix=[
          [1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1],
          [0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
          [0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1],
          [0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
          [0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1],
          [0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
          [0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1],
          [0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
          [0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
          [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1],
          [0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0],
          [0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
          [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
            ]

#2)When there is not any weed

CoinMatrix=[
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0]
            ]

#3) When there is a weed in every cell

CoinMatrix=[
          [1,1,1,1,1,1],
          [1,1,1,1,1,1],
          [1,1,1,1,1,1],
          [1,1,1,1,1,1],
          [1,1,1,1,1,1]
            ]

#4)When there is a weed in just one column

CoinMatrix=[
          [0,0,0,0,0,1],
          [0,0,0,0,0,1],
          [0,0,0,0,0,1],
          [0,0,0,0,0,1],
          [0,0,0,0,0,1]
            ]

#5)When there is a weed in just one row

CoinMatrix=[
          [1,1,1,1,1,1],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0]
            ]

#6)When there is one weed for each row
CoinMatrix=[
          [1,0,0,0,0,0],
          [0,0,0,1,0,0],
          [0,1,0,0,0,0],
          [0,0,0,0,1,0],
          [0,0,1,0,0,0]
            ]

import matplotlib.pyplot as plt
# x axis values
x = [1,2,3,4,5,6]
# corresponding y axis values
y = [0.00727,0.001933,0.01513, 0.009818,0.001779,0.0018289]
  
# plotting the points 
plt.plot(x, y)
  
# naming the x axis
plt.xlabel('Number of test case')
# naming the y axis
plt.ylabel('Running time in seconds')
  
# giving a title to my graph
plt.title('Naive Algorithm')
  
# function to show the plot
plt.show()

#test cases for black box testing

#1) no weed

CoinMatrix=[
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0],
          [0,0,0,0,0,0]
            ]

#2) one row with multiple column

CoinMatrix=[
          [1,0,1,1,0,0],
            ]

#3) one column with multiple row

CoinMatrix=[
          [1],
          [1],
          [0],
          [1],
          [0]
            ]

#test cases for white box testing

#in order to test all if/else statements
CoinMatrix=[[1,0,0,0],
            [1,1,1,1],
            [0,0,0,1],
            [0,0,0,1]]